# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'Test'
  pool:
    vmImage: 'Ubuntu-18.04'
  strategy:
    matrix:
      Python381:
        python.version: '3.8'
        ONNX_PATH: onnx==1.7.0

      Python382:
        python.version: '3.8'
        ONNX_PATH: onnx==1.8.0

      Python391:
        python.version: '3.9'
        ONNX_PATH: onnx==1.9.0
  
      Python392:
        python.version: '3.9'
        ONNX_PATH: onnx==1.10.2

      Python393:
        python.version: '3.9'
        ONNX_PATH: onnx==1.12.0

      Python310_112:
        python.version: '3.10'
        ONNX_PATH: onnx==1.12.0


    maxParallel: 4

  steps:
  - script: sudo install -d -m 0777 /home/vsts/.conda/envs
    displayName: Fix Conda permissions

  - task: CondaEnvironment@1
    inputs:
      createCustomEnvironment: true
      environmentName: 'py$(python.version)'
      packageSpecs: 'python=$(python.version)'

  - script: |
      python -m pip install --upgrade pip
      conda config --set always_yes yes --set changeps1 no
      conda install -c conda-forge protobuf
      conda install -c conda-forge numpy
      pip install pytest
    displayName: 'Install dependencies'

  - script: |
      pip install onnxruntime
      pip install onnxmltools
      pip install $(ONNX_PATH)
    displayName: 'Install onnxruntime, onnxmltools'

  - script: |
      python -c "import onnxconverter_common"
    displayName: 'Check import without onnxruntime'

  - script: |
      pip install -e .
    displayName: 'Install onnxconverter_common'

  - script: |
      pip install flake8
      python -m flake8 onnxconverter_common
    displayName: 'run flake8 check'

  - script: |
      python -c "import onnxconverter_common"
      pytest tests --doctest-modules --junitxml=junit/test-results-onnxutils.xml
    displayName: 'pytest - onnxutils'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()
