trigger: none

# The `resources` specify the location and version of the 1ES PT.
resources:
  repositories:
  - repository: 1esPipelines
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  # The pipeline extends the 1ES PT which will inject different SDL and compliance tasks.
  # For non-production pipelines, use "Unofficial" as defined below.
  # For productions pipelines, use "Official".
  template: v1/1ES.Unofficial.PipelineTemplate.yml@1esPipelines
  parameters:
    # Update the pool with your team's 1ES hosted pool.
    pool:
      name: onnxruntime-Win-CPU-2022
      os: windows  # OS of the image. This value cannot be a variable. Allowed values: windows, linux, macOS

    stages:
    - stage: Stage
      jobs:
      - job: HostJob
        # If the pipeline publishes artifacts, use `templateContext` to define the artifacts.
        # This will enable 1ES PT to run SDL analysis tools on the artifacts and then upload them.
        templateContext:
          outputs:
          - output: pipelineArtifact
            targetPath: $(Build.SourcesDirectory)/dist
            artifactName: artifactName
        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.x'            
            architecture: 'x64'
        - script: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip install onnxruntime
            pip install onnxmltools
            pip install onnx
            pip install pytest
            pip install -e .
          displayName: 'Install dependencies'

        - script: |
            pip install flake8
            python -m flake8 onnxconverter_common
          displayName: 'run flake8 check'

        - script: |
            python -c "import onnxconverter_common"
            pytest tests --doctest-modules --junitxml=junit/test-results.xml
          displayName: 'pytest - onnxutils'

        - task: PublishTestResults@2
          inputs:
            testResultsFiles: 'junit/test-results.xml'
            testRunTitle: 'Python 3.9'
          condition: succeededOrFailed()

        - task: CmdLine@2
          displayName: Command Line Script
          inputs:
            script: |
              pip install --upgrade pip
              pip install wheel
              python setup.py bdist_wheel